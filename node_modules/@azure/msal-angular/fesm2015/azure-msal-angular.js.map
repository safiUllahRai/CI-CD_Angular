{"version":3,"file":"azure-msal-angular.js","sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.broadcast.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.redirect.component.ts","../../src/msal.module.ts","../../src/msal.navigation.client.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n\r\nexport const MSAL_BROADCAST_CONFIG = new InjectionToken<string>(\"MSAL_BROADCAST_CONFIG\");\r\n","/* eslint-disable header/header */\r\nexport const name = \"@azure/msal-angular\";\r\nexport const version = \"2.5.8\";\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    EndSessionPopupRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\nimport { name, version } from \"./packageMetadata\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n\r\n    initialize(): Observable<void> {\r\n        return from(this.instance.initialize());\r\n    }\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash?: string): Observable<AuthenticationResult> {\r\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Observable<void> {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable, Optional } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from \"rxjs\";\r\nimport { MSAL_BROADCAST_CONFIG, MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MsalBroadcastConfiguration } from \"./msal.broadcast.config\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n    private _inProgress: BehaviorSubject<InteractionStatus>;\r\n    public inProgress$: Observable<InteractionStatus>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication,\r\n        private authService: MsalService,\r\n        @Optional() @Inject(MSAL_BROADCAST_CONFIG) private msalBroadcastConfig?: MsalBroadcastConfiguration\r\n    ) {\r\n        // Make _msalSubject a ReplaySubject if configured to replay past events\r\n        if (this.msalBroadcastConfig && this.msalBroadcastConfig.eventsToReplay > 0) {\r\n            this.authService.getLogger().verbose(`BroadcastService - replayPastEvents set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\r\n            this._msalSubject = new ReplaySubject<EventMessage>(this.msalBroadcastConfig.eventsToReplay);\r\n        } else {\r\n            // Defaults to _msalSubject being a Subject\r\n            this._msalSubject = new Subject<EventMessage>();\r\n        }\r\n\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject<InteractionStatus>(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\r\n            if (status !== null) {\r\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\r\n    private loginFailedRoute?: UrlTree;\r\n\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private msalBroadcastService: MsalBroadcastService,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private router: Router\r\n    ) { \r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url \r\n     */\r\n    parseUrl(url: string): UrlTree {\r\n        return this.router.parseUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    private loginInteractively(state: RouterStateSnapshot): Observable<boolean> {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : { ...this.msalGuardConfig.authRequest };\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup(authRequest as PopupRequest)\r\n                .pipe(\r\n                    map((response: AuthenticationResult) => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                        this.authService.instance.setActiveAccount(response.account);\r\n                        return true;\r\n                    })\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...authRequest\r\n        } as RedirectRequest)\r\n            .pipe(\r\n                map(() => false)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state \r\n     */\r\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         */\r\n        if (typeof window !== \"undefined\") {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe() && !this.authService.instance.getConfiguration().system.allowRedirectInIframe) {\r\n                this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n                return of(false);\r\n            }\r\n        } else {\r\n            this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\r\n            return of(true);\r\n        }\r\n\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        if (state) {\r\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                            return this.loginInteractively(state);\r\n                        } \r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                        return of(false);\r\n                    }\r\n\r\n                    this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\r\n\r\n                    // Prevent navigating the app to /#code= or /code=\r\n                    if (state) {\r\n                        /*\r\n                         * Path routing:\r\n                         * state.url: /#code=...\r\n                         * state.root.fragment: code=...\r\n                         */\r\n\r\n                        /*\r\n                         * Hash routing:\r\n                         * state.url: /code\r\n                         * state.root.fragment: null\r\n                         */\r\n                        const urlContainsCode: boolean = this.includesCode(state.url);\r\n                        const fragmentContainsCode: boolean = !!state.root && !!state.root.fragment && this.includesCode(`#${state.root.fragment}`);\r\n                        const hashRouting: boolean = this.location.prepareExternalUrl(state.url).indexOf(\"#\") === 0;\r\n\r\n                        // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\r\n                        if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\r\n                            this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\r\n                            \r\n                            // Path routing (navigate to current path without hash)\r\n                            if (currentPath.indexOf(\"#\") > -1) {\r\n                                return of(this.parseUrl(this.location.path()));\r\n                            }\r\n                            \r\n                            // Hash routing (navigate to root path)\r\n                            return of(this.parseUrl(\"\"));\r\n                        }\r\n                    }\r\n\r\n                    return of(true);\r\n\r\n                }),\r\n                catchError((error: Error) => {\r\n                    this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\r\n                    this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\r\n                    /**\r\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n                     */\r\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                        return of(this.loginFailedRoute);\r\n                    }\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n    includesCode(path: string): boolean {\r\n        return (path.lastIndexOf(\"/code\") > -1 &&\r\n            path.lastIndexOf(\"/code\") === path.length - \"/code\".length) || // path.endsWith(\"/code\")\r\n            path.indexOf(\"#code=\") > -1 || \r\n            path.indexOf(\"&code=\") > -1;\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canLoad(): Observable<boolean> {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Location, DOCUMENT } from \"@angular/common\";\r\nimport { Observable, EMPTY, of } from \"rxjs\";\r\nimport { switchMap, catchError, take, filter } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionStatus, InteractionType, StringUtils, UrlString } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorAuthRequest, MsalInterceptorConfiguration, ProtectedResourceScopes, MatchingResources } from \"./msal.interceptor.config\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    private _document?: Document;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private msalBroadcastService: MsalBroadcastService,\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n        @Inject(DOCUMENT) document?: any\r\n    ) {\r\n        this._document = document as Document;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        // Sets account as active account or first account\r\n        let account: AccountInfo;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        } else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, { account: account })\r\n            : { ...this.msalInterceptorConfig.authRequest, account };\r\n\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n\r\n        return this.acquireToken(authRequest, scopes, account)\r\n            .pipe(\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @param account Account\r\n     * @returns Authentication result\r\n     */\r\n    private acquireToken(authRequest: MsalInterceptorAuthRequest, scopes: string[], account: AccountInfo): Observable<AuthenticationResult> {\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...authRequest, scopes, account })\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n                    return this.msalBroadcastService.inProgress$\r\n                        .pipe(\r\n                            take(1),\r\n                            switchMap((status: InteractionStatus) => {\r\n                                if (status === InteractionStatus.None) {\r\n                                    return this.acquireTokenInteractively(authRequest, scopes);\r\n                                }\r\n\r\n                                return this.msalBroadcastService.inProgress$\r\n                                    .pipe(\r\n                                        filter((status: InteractionStatus) => status === InteractionStatus.None),\r\n                                        take(1),\r\n                                        switchMap(() => this.acquireToken(authRequest, scopes, account))\r\n                                    );\r\n                            })\r\n                        );\r\n                }),\r\n                switchMap((result: AuthenticationResult)  => {\r\n                    if (!result.accessToken) {\r\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                        return this.msalBroadcastService.inProgress$\r\n                            .pipe(\r\n                                filter((status: InteractionStatus) => status === InteractionStatus.None),\r\n                                take(1),\r\n                                switchMap(() => this.acquireTokenInteractively(authRequest, scopes))\r\n                            );\r\n                    }\r\n                    return of(result);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    private acquireTokenInteractively(authRequest: MsalInterceptorAuthRequest, scopes: string[]): Observable<AuthenticationResult> {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({ ...authRequest, scopes });\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({...authRequest, scopes, redirectStartPage });\r\n        return EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    private getScopesForEndpoint(endpoint: string, httpMethod: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n\r\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\r\n        if (matchingProtectedResources.absoluteResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\r\n        } else if (matchingProtectedResources.relativeResources.length > 0){\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    private matchResourcesToEndpoint(protectedResourcesEndpoints: string[], endpoint: string): MatchingResources {\r\n        const matchingResources: MatchingResources = {absoluteResources: [], relativeResources: []};\r\n\r\n        protectedResourcesEndpoints.forEach(key => {\r\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\r\n            const normalizedKey = this.location.normalize(key);\r\n            if (StringUtils.matchPattern(normalizedKey, endpoint)){\r\n                matchingResources.absoluteResources.push(key);\r\n            }\r\n\r\n            // Get url components for relative urls\r\n            const absoluteKey = this.getAbsoluteUrl(key);\r\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\r\n\r\n            // Normalized key should include query strings if applicable\r\n            const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\r\n\r\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\r\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\"){\r\n                matchingResources.relativeResources.push(key);\r\n            }\r\n        });\r\n\r\n        return matchingResources;\r\n    }\r\n\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\r\n    private getAbsoluteUrl(url: string): string {\r\n        const link = this._document.createElement(\"a\");\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\r\n    private matchScopesToEndpoint(protectedResourceMap: Map<string, Array<string|ProtectedResourceScopes> | null>, endpointArray: string[], httpMethod: string): Array<string>|null {\r\n        const allMatchedScopes = [];\r\n\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach(matchedEndpoint => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n\r\n            methodAndScopesArray.forEach(entry => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === \"string\") {\r\n                    scopesForEndpoint.push(entry);\r\n                } else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method\r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        } else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to \r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\n\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { concatMap } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Component({\r\n    selector: \"app-redirect\",\r\n    template: \"\"\r\n})\r\nexport class MsalRedirectComponent implements OnInit {\r\n\r\n    constructor(private authService: MsalService) { }\r\n\r\n    ngOnInit(): void {    \r\n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\r\n        this.authService.initialize().pipe(\r\n            concatMap(() => {\r\n                return this.authService.handleRedirectObservable();\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\n\r\n@NgModule({\r\n    declarations: [MsalRedirectComponent],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NavigationClient, NavigationOptions, UrlString } from \"@azure/msal-browser\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Location } from \"@angular/common\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\r\n@Injectable()\r\nexport class MsalCustomNavigationClient extends NavigationClient {\r\n\r\n    constructor(\r\n        private authService: MsalService,\r\n        private router: Router, \r\n        private location: Location\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    async navigateInternal(url:string, options: NavigationOptions): Promise<boolean> {\r\n        this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\r\n        \r\n        this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\r\n        this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n        \r\n        // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n        if (options.noHistory) {\r\n            return super.navigateInternal(url, options);\r\n        } else {\r\n            // Normalizing newUrl if no query string\r\n            const urlComponents = new UrlString(url).getUrlComponents();\r\n            const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\r\n            this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });\r\n        }\r\n        return Promise.resolve(options.noHistory);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\r\n\r\nexport { MsalService } from \"./msal.service\";\r\nexport { IMsalService } from \"./IMsalService\";\r\nexport { MsalGuard } from \"./msal.guard\";\r\nexport { MsalGuardConfiguration, MsalGuardAuthRequest } from \"./msal.guard.config\";\r\nexport { MsalInterceptor } from \"./msal.interceptor\";\r\nexport { MsalInterceptorConfiguration, MsalInterceptorAuthRequest, ProtectedResourceScopes } from \"./msal.interceptor.config\";\r\nexport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG, MSAL_BROADCAST_CONFIG } from \"./constants\";\r\nexport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nexport { MsalBroadcastConfiguration } from \"./msal.broadcast.config\";\r\nexport { MsalModule } from \"./msal.module\";\r\nexport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\nexport { MsalCustomNavigationClient } from \"./msal.navigation.client\";\r\nexport { version } from \"./packageMetadata\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}